train$exterior_cond2[train$ExterCond == "Po"] <- 1
price <- summarize(group_by(train, Foundation),mean(SalePrice, na.rm=T))
train$found_concrete[train$Foundation == "PConc"] <- 1
train$found_concrete[train$Foundation != "PConc"] <- 0
price <- summarize(group_by(train, BsmtQual),mean(SalePrice, na.rm=T))
train$bsmt_cond1[train$BsmtQual == "Ex"] <- 5
train$bsmt_cond1[train$BsmtQual == "Gd"] <- 4
train$bsmt_cond1[train$BsmtQual == "Fa"] <- 2
train$bsmt_cond1[is.na(train$BsmtQual)] <- 1
train$bsmt_cond1[train$BsmtQual == "TA"] <- 3
price <- summarize(group_by(train, BsmtCond),mean(SalePrice, na.rm=T))
train$bsmt_cond2[train$BsmtCond == "Gd"] <- 5
train$bsmt_cond2[train$BsmtCond == "TA"] <- 4
train$bsmt_cond2[train$BsmtCond == "Fa"] <- 3
train$bsmt_cond2[is.na(train$BsmtCond)] <- 2
train$bsmt_cond2[train$BsmtCond == "Po"] <- 1
price <- summarize(group_by(train, BsmtExposure),mean(SalePrice, na.rm=T))
train$bsmt_exp[train$BsmtExposure == "Gd"] <- 5
train$bsmt_exp[train$BsmtExposure == "Av"] <- 4
train$bsmt_exp[train$BsmtExposure == "Mn"] <- 3
train$bsmt_exp[train$BsmtExposure == "No"] <- 2
train$bsmt_exp[is.na(train$BsmtExposure)] <- 1
price <- summarize(group_by(train, BsmtFinType1),mean(SalePrice, na.rm=T))
train$bsmt_fin1[train$BsmtFinType1 == "GLQ"] <- 5
train$bsmt_fin1[train$BsmtFinType1 == "ALQ"] <- 3
train$bsmt_fin1[train$BsmtFinType1 %in% c("BLQ", "Rec", "LwQ")] <- 2
train$bsmt_fin1[is.na(train$BsmtFinType1)] <- 1
train$bsmt_fin1[train$BsmtFinType1 == "Unf"] <- 4
price <- summarize(group_by(train, BsmtFinType2),mean(SalePrice, na.rm=T))
train$bsmt_fin2[train$BsmtFinType2 == "ALQ"] <- 6
train$bsmt_fin2[train$BsmtFinType2 == "Unf"] <- 5
train$bsmt_fin2[train$BsmtFinType2 == "GLQ"] <- 4
train$bsmt_fin2[train$BsmtFinType2 %in% c("Rec", "LwQ")] <- 3
train$bsmt_fin2[train$BsmtFinType2 == "BLQ"] <- 2
train$bsmt_fin2[is.na(train$BsmtFinType2)] <- 1
price <- summarize(group_by(train, Heating),mean(SalePrice, na.rm=T))
train$gasheat[train$Heating %in% c("GasA", "GasW")] <- 1
train$gasheat[!train$Heating %in% c("GasA", "GasW")] <- 0
price <- summarize(group_by(train, HeatingQC),mean(SalePrice, na.rm=T))
train$heatqual[train$HeatingQC == "Ex"] <- 5
train$heatqual[train$HeatingQC == "Gd"] <- 4
train$heatqual[train$HeatingQC == "TA"] <- 3
train$heatqual[train$HeatingQC == "Fa"] <- 2
train$heatqual[train$HeatingQC == "Po"] <- 1
price <- summarize(group_by(train, CentralAir),mean(SalePrice, na.rm=T))
train$air[train$CentralAir == "Y"] <- 1
train$air[train$CentralAir == "N"] <- 0
price <- summarize(group_by(train, Electrical),mean(SalePrice, na.rm=T))
train$standard_electric[train$Electrical == "SBrkr" | is.na(train$Electrical)] <- 1
train$standard_electric[!train$Electrical == "SBrkr" & !is.na(train$Electrical)] <- 0
price <- summarize(group_by(train, KitchenQual),mean(SalePrice, na.rm=T))
train$kitchen[train$KitchenQual == "Ex"] <- 4
train$kitchen[train$KitchenQual == "Gd"] <- 3
train$kitchen[train$KitchenQual == "TA"] <- 2
train$kitchen[train$KitchenQual == "Fa"] <- 1
price <- summarize(group_by(train, FireplaceQu),mean(SalePrice, na.rm=T))
train$fire[train$FireplaceQu == "Ex"] <- 5
train$fire[train$FireplaceQu == "Gd"] <- 4
train$fire[train$FireplaceQu == "Fa"] <- 2
train$fire[train$FireplaceQu == "TA"] <- 3
train$fire[train$FireplaceQu == "Po" | is.na(train$FireplaceQu)] <- 1
price <- summarize(group_by(train, GarageType),mean(SalePrice, na.rm=T))
train$gar_attach[train$GarageType %in% c("Attchd", "BuiltIn")] <- 1
train$gar_attach[!train$GarageType %in% c("Attchd", "BuiltIn")] <- 0
price <- summarize(group_by(train, GarageFinish),mean(SalePrice, na.rm=T))
train$gar_finish[train$GarageFinish %in% c("Fin", "RFn")] <- 1
train$gar_finish[!train$GarageFinish %in% c("Fin", "RFn")] <- 0
price <- summarize(group_by(train, GarageQual),
price <- summarize(group_by(train, GarageQual),mean(SalePrice, na.rm=T))
train$garqual[train$GarageQual == "Ex"] <- 5
train$garqual[train$GarageQual == "Gd"] <- 4
train$garqual[train$GarageQual == "TA"] <- 3
train$garqual[train$GarageQual == "Fa"] <- 2
train$garqual[train$GarageQual == "Po" | is.na(train$GarageQual)] <- 1
price <- summarize(group_by(train, GarageQual),mean(SalePrice, na.rm=T))
train$garqual[train$GarageQual == "Ex"] <- 5
train$garqual[train$GarageQual == "Gd"] <- 4
train$garqual[train$GarageQual == "TA"] <- 3
train$garqual[train$GarageQual == "Fa"] <- 2
train$garqual[train$GarageQual == "Po" | is.na(train$GarageQual)] <- 1
price <- summarize(group_by(train, GarageCond),mean(SalePrice, na.rm=T))
train$garqual2[train$GarageCond == "Ex"] <- 5
train$garqual2[train$GarageCond == "Gd"] <- 4
train$garqual2[train$GarageCond == "TA"] <- 3
train$garqual2[train$GarageCond == "Fa"] <- 2
train$garqual2[train$GarageCond == "Po" | is.na(train$GarageCond)] <- 1
price <- summarize(group_by(train, PavedDrive),mean(SalePrice, na.rm=T))
train$paved_drive[train$PavedDrive == "Y"] <- 1
train$paved_drive[!train$PavedDrive != "Y"] <- 0
train$paved_drive[is.na(train$paved_drive)] <- 0
price <- summarize(group_by(train, Functional),mean(SalePrice, na.rm=T))
train$housefunction[train$Functional %in% c("Typ", "Mod")] <- 1
train$housefunction[!train$Functional %in% c("Typ", "Mod")] <- 0
price <- summarize(group_by(train, PoolQC),mean(SalePrice, na.rm=T))
train$pool_good[train$PoolQC %in% c("Ex")] <- 1
train$pool_good[!train$PoolQC %in% c("Ex")] <- 0
price <- summarize(group_by(train, Fence),mean(SalePrice, na.rm=T))
train$priv_fence[train$Fence %in% c("GdPrv")] <- 1
train$priv_fence[!train$Fence %in% c("GdPrv")] <- 0
price <- summarize(group_by(train, MiscFeature),mean(SalePrice, na.rm=T))
price <- summarize(group_by(train, SaleType),mean(SalePrice, na.rm=T))
train$sale_cat[train$SaleType %in% c("New", "Con")] <- 5
train$sale_cat[train$SaleType %in% c("CWD", "ConLI")] <- 4
train$sale_cat[train$SaleType %in% c("WD")] <- 3
train$sale_cat[train$SaleType %in% c("COD", "ConLw", "ConLD")] <- 2
train$sale_cat[train$SaleType %in% c("Oth")] <- 1
price <- summarize(group_by(train, SaleCondition),mean(SalePrice, na.rm=T))
train$sale_cond[train$SaleCondition %in% c("Partial")] <- 4
train$sale_cond[train$SaleCondition %in% c("Normal", "Alloca")] <- 3
train$sale_cond[train$SaleCondition %in% c("Family","Abnorml")] <- 2
train$sale_cond[train$SaleCondition %in% c("AdjLand")] <- 1
price <- summarize(group_by(train, MSZoning),mean(SalePrice, na.rm=T))
train$zone[train$MSZoning %in% c("FV")] <- 4
train$zone[train$MSZoning %in% c("RL")] <- 3
train$zone[train$MSZoning %in% c("RH","RM")] <- 2
train$zone[train$MSZoning %in% c("C (all)")] <- 1
price <- summarize(group_by(train, Alley),mean(SalePrice, na.rm=T))
train$alleypave[train$Alley %in% c("Pave")] <- 1
train$alleypave[!train$Alley %in% c("Pave")] <- 0
train$Street <- NULL
train$LotShape <- NULL
train$LandContour <- NULL
train$Utilities <- NULL
train$LotConfig <- NULL
train$LandSlope <- NULL
train$Neighborhood <- NULL
train$Condition1 <- NULL
train$Condition2 <- NULL
train$BldgType <- NULL
train$HouseStyle <- NULL
train$RoofStyle <- NULL
train$RoofMatl <- NULL
train$Exterior1st <- NULL
train$Exterior2nd <- NULL
train$MasVnrType <- NULL
train$ExterQual <- NULL
train$ExterCond <- NULL
train$Foundation <- NULL
train$BsmtQual <- NULL
train$BsmtCond <- NULL
train$BsmtExposure <- NULL
train$BsmtFinType1 <- NULL
train$BsmtFinType2 <- NULL
train$Heating <- NULL
train$HeatingQC <- NULL
train$CentralAir <- NULL
train$Electrical <- NULL
train$KitchenQual <- NULL
train$FireplaceQu <- NULL
train$GarageType <- NULL
train$GarageFinish <- NULL
train$GarageQual <- NULL
train$GarageCond <- NULL
train$PavedDrive <- NULL
train$Functional <- NULL
train$PoolQC <- NULL
train$Fence <- NULL
train$MiscFeature <- NULL
train$SaleType <- NULL
train$SaleCondition <- NULL
train$MSZoning <- NULL
train$Alley <- NULL
###### Correlations
library(corrplot)
install.packages("corrplot")
correlations <- cor(train[,c(5,6,7,8, 16:25)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
library(corrplot)
correlations <- cor(train[,c(5,6,7,8, 16:25)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
correlations <- cor(train[,c(5,6,7,8, 26:35)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
correlations <- cor(train[,c(5,6,7,8, 66:75)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
pairs(~YearBuilt+OverallQual+TotalBsmtSF+GrLivArea,data=train,main="Simple Scatterplot Matrix")
library(car)
scatterplot(SalePrice ~ YearBuilt, data=train,  xlab="Year Built", ylab="Sale Price", grid=FALSE)
scatterplot(SalePrice ~ YrSold, data=train,  xlab="Year Sold", ylab="Sale Price", grid=FALSE)
scatterplot(SalePrice ~ X1stFlrSF, data=train,  xlab="Square Footage Floor 1", ylab="Sale Price", grid=FALSE)
#Fix some NAs
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- 0
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$LotFrontage[is.na(train$LotFrontage)] <- 0
#Interactions based on correlation
train$year_qual <- train$YearBuilt*train$OverallQual #overall condition
train$year_r_qual <- train$YearRemodAdd*train$OverallQual #quality x remodel
train$qual_bsmt <- train$OverallQual*train$TotalBsmtSF #quality x basement size
train$livarea_qual <- train$OverallQual*train$GrLivArea #quality x living area
train$qual_bath <- train$OverallQual*train$FullBath #quality x baths
train$qual_ext <- train$OverallQual*train$exterior_cond #quality x exterior
outcome <- train$SalePrice
outcome[1:10,]
outcome
partition <- createDataPartition(y=outcome,p=.5,list=F)
training <- train[partition,]
require(caret)
partition <- createDataPartition(y=outcome,p=.5,list=F)
training <- train[partition,]
testing <- train[-partition,]
training[1:10,]
lm_model_15 <- lm(SalePrice ~ ., data=training)
summary(lm_model_15)
lm_model_15 <- lm(SalePrice ~ MSSubClass+LotArea+BsmtUnfSF+
X1stFlrSF+X2ndFlrSF+GarageCars+
WoodDeckSF+nbhd_price_level+
exterior_cond+pos_features_1+
bsmt_exp+kitchen+housefunction+pool_good+sale_cond+
qual_ext+qual_bsmt, data=training)
summary(lm_model_15)
prediction <- predict(lm_model_15, testing, type="response")
prediction[1:10,]
model_output <- cbind(testing, prediction)
model_output[1:10,]
model_output$log_prediction <- log(model_output$prediction)
model_output$log_SalePrice <- log(model_output$SalePrice)
rmse(model_output$log_SalePrice,model_output$log_prediction)
library(Metrics)
rmse(model_output$log_SalePrice,model_output$log_prediction)
install.packages("rmarkdown")
install.packages("texlive-extras")
library(choroplethr)
install.packages("choroplethr")
library(choroplethr)
library(acs)
library(ggplot2)
api.key.install("95147043cfb3460867a1fc678808514e4a3d04fc")
choroplethr_acs(tableId="B19301",lod="state")
state_choroplethr_acs(tableId="B19301",lod="state")
state_choropleth_acs(tableId="B19301",lod="state")
state_choropleth_acs(tableId="B19301")
install.packages("choroplethrMaps")
state_choropleth_acs(tableId="B19301")
state_choropleth_acs(tableId="B19301",showLabels=FALSE)
state_choropleth_acs(tableId="B19301")
state_choropleth_acs(tableId="B19301") +
labs(title="US 2011 Per Capita Income by State")
state_choropleth_acs(tableId="B19301",num_buckets=9) +
labs(title="US 2011 Per Capita Income by State")
choroplethr_acs(tableId="B19301",lod="county")
## Per Capita Income by County
county_choropleth_acs(tableId="B19301")
county_choropleth_acs(tableId="B19301",states=c("CA"))
source('C:/Github/DataBlog/chloroplethr_US_Race_County.R', echo=TRUE)
county_choropleth_acs(tableId="B19301",state_zoom="CA")
county_choropleth_acs(tableId="B19301",state_zoom="california")
county_choropleth_acs(tableId="B01003")+labs(title="Total US Population by County (2011)")
county_choropleth_acs(tableId="B02008")+labs(title="US Population by County (2011) - White")
county_choropleth_acs(tableId="B02009")+labs(title="US Population by County (2011) - Black ")
county_choropleth_acs(tableId="B02011")+labs(title="US Population by County (2011) - Asian")
county_choropleth_acs(tableId="B03001")+labs(title="US Population by County (2011) - Hispanic")
state_choropleth_acs(tableId="B19301")
county_choropleth_acs(tableId="B19301")
get_acs_data(tableId="B19301",map="county")
df<-get_acs_data(tableId="B19301",map="county")
df[1:10,]
dim(df)
str(df)
df$df[1:10,]
df_1<-get_acs_data(tableId="B19301",map="county")
df_1$df[1:10,]
df_1<-get_acs_data(tableId="B19301",map="county",endyear=2015)
df_2015<-get_acs_data(tableId="B19301",map="county",endyear=2015)
df_2014<-get_acs_data(tableId="B19301",map="county",endyear=2014)
df_2015$df[1:10,]
df_2014$df[1:10,]
df_list<-list()
choro_list<-list()
choro_list[[1]]<-df_2015
choro_list[[2]]<-df_2014
choro_list
choroplethr_animate(choro_list)
choro_list<-list()
choro_list[[1]]<-choroplethr(df_2015,"county")
choro_list<-list()
choro_list[[1]]<-county_choropleth(df_2015)
choro_list[[2]]<-county_choropleth(df_2014)
df_2015<-get_acs_data(tableId="B19301",map="state",endyear=2015)
df_2014<-get_acs_data(tableId="B19301",map="state",endyear=2014)
choro_list<-list()
choro_list[[1]]<-state_choropleth(df_2015)
choro_list[[2]]<-state_choropleth(df_2014)
df_2015[1:10,]
df_2015$df[1:10,]
choro_list<-list()
choro_list[[1]]<-state_choropleth(df_2015$df)
choro_list[[2]]<-state_choropleth(df_2014$df)
choroplethr_animate(choro_list)
getwd()
setwd("C:/GitHub/DataBlog")
ls()
setwd("C:/GitHub/DataBlog")
choro_list<-list()
choro_list[[1]]<-county_choropleth(df_2015$df)
choro_list[[2]]<-county_choropleth(df_2014$df)
df_2015<-get_acs_data(tableId="B19301",map="county",endyear=2015)
df_2014<-get_acs_data(tableId="B19301",map="county",endyear=2014)
choro_list<-list()
choro_list[[1]]<-county_choropleth(df_2015$df)
choro_list[[2]]<-county_choropleth(df_2014$df)
choroplethr_animate(choro_list)
df_2013<-get_acs_data(tableId="B19301",map="county",endyear=2013)
df_2012<-get_acs_data(tableId="B19301",map="county",endyear=2012)
df_2011<-get_acs_data(tableId="B19301",map="county",endyear=2011)
df_2010<-get_acs_data(tableId="B19301",map="county",endyear=2010)
df_2016<-get_acs_data(tableId="B19301",map="county",endyear=2016)
choro_list<-list()
choro_list[[1]]<-county_choropleth(df_2010$df)
choro_list[[2]]<-county_choropleth(df_2011$df)
choro_list[[3]]<-county_choropleth(df_2012$df)
choro_list[[4]]<-county_choropleth(df_2013$df)
choro_list[[5]]<-county_choropleth(df_2014$df)
choro_list[[6]]<-county_choropleth(df_2015$df)
choroplethr_animate(choro_list)
county_choropleth_acs(tableId="B19301")
county_choropleth_acs(tableId="B19301") +
scale_y_continuous(breaks=seq(0,10000,10000000))
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(palette=2)
county_choropleth_acs(tableId="B19301",num_colors=4)
county_choropleth_acs(tableId="B19301",num_colors=1)  # continuous
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(breaks=seq(0,10000,50000000))
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(palette=3)
county_choropleth_acs
county_choropleth_acs(tableId="B19301")
county_choropleth_acs(tableId="B02008")+labs(title="US Population by County (2011) - White")
county_choropleth_acs(tableId="B02009")+labs(title="US Population by County (2011) - Black ")
county_choropleth_acs(tableId="B02011")+labs(title="US Population by County (2011) - Asian")
county_choropleth_acs(tableId="B03001")+labs(title="US Population by County (2011) - Hispanic")
# Changing colors
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(palette=3)
choro<-CountyChoropleth$new(county_choropleth_acs(tableId="B19301"))
data(df_president)
df_president[1:10,]
str(df_president)
choro = StateChoropleth$new(df_president)
str(choro)
temp<-county_choropleth_acs(tableId="B19301")
str(temp)
temp$data[1:10,]
temp$df[1:10,]
temp<-data(county_choropleth_acs(tableId="B19301"))
df_2015[1:10,]
str(df_2015)
df_2015$df[1:10,]
temp<-df_2015$df
choro1<-CountyChoropleth$new(temp)
choro1<-CountyChoropleth$new(temp)
choro1$title = "2015 Per Capita Income"
choro1$ggplot_scale = scale_fill_manual(name="JON", values=c("blue", "red","orange","green","black","purple","yellow"), drop=FALSE)
choro1$render()
col.pal<-brewer.pal(7,"green")
library(RColorBrewer)
col.pal<-brewer.pal(7,"green")
col.pal<-brewer.pal(7,"greens")
col.pal<-brewer.pal(7,"reds")
col.pal<-brewer.pal(7,"red")
col.pal<-brewer.pal(7,"Green")
col.pal<-brewer.pal(7,"Greens")
choro1$ggplot_scale = scale_fill_manual(name="Per Capita Income",values=col.pal, drop=FALSE)
choro1$render()
?state_choropleth
data(df_pop_state)
df_pop_state$str = ""
df_pop_state[1:10,]
for (i in 1:nrow(df_pop_state))
{
if (df_pop_state[i,"value"] < 1000000)
{
df_pop_state[i,"str"] = "< 1M"
} else {
df_pop_state[i,"str"] = "> 1M"
}
}
df_pop_state[1:10,]
df_pop_state$value = df_pop_state$str
state_choropleth(df_pop_state, title = "Which states have less than 1M people?")
str(df_pop_state)
county_choropleth(df_2010$df)
df_2010$df[1:10,]
df_2010$df$breaks<-""
for (i in 1:nrow(df_2010$df))
{
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] = "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] = "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] = "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] = "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] = "$40K+"
}
}
for (i in 1:nrow(df_2010$df))
{
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] <- "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] <- "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] <- "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] <- "$40K+"
}
}
i=1
df_2010$df[i,"value"]
df_2010$df[i,"value"] < 10000
df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000
df_2010$df[i,"value"]>=40000
df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] <- "$0-$10K"
}
df_2010$df[1:10,]
df_2010$df$breaks<-""
for (i in 1:nrow(df_2010$df))
{
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] <- "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] <- "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] <- "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] <- "$40K+"
}
}
df_2010$df[1:10,]
df_2010$df$value<-df_2010$df$breaks
county_choropleth(df_2010$df)
sum(is.na(df_2010$df))
df_2010<-get_acs_data(tableId="B19301",map="county",endyear=2010)
df_2010$df$breaks<-""
for (i in 1:nrow(df_2010$df))
{
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] <- "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] <- "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] <- "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] <- "$40K+"
}
}
sum(is.na(df_2010$df))
table(df_2010$df$breaks)
df_2010$df[df_2010$df$breaks=="",][1:10,]
df_2010$df$breaks<-""
for (i in 1:nrow(df_2010$df))
{
if (df_2010$df[i,"value"] < 10000)
{
df_2010$df[i,"breaks"] <- "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] <- "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] <- "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] <- "$40K+"
} else if (is.na(df_2010$df[i,"value"])) {
df_2010$df[i,"breaks"] <- "$20-$30K"
}
}
table(df_2010$df$breaks)
i=2261
df_2010$df[i,"value"]
is.na(df_2010$df[i,"value"])
df_2010$df$breaks<-""
for (i in 1:nrow(df_2010$df))
{
if (is.na(df_2010$df[i,"value"]))
{
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"] < 10000) {
df_2010$df[i,"breaks"] <- "$0-$10K"
} else if (df_2010$df[i,"value"]>=10000 & df_2010$df[i,"value"]<20000) {
df_2010$df[i,"breaks"] <- "$10-$20K"
} else if (df_2010$df[i,"value"]>=20000 & df_2010$df[i,"value"]<30000) {
df_2010$df[i,"breaks"] <- "$20-$30K"
} else if (df_2010$df[i,"value"]>=30000 & df_2010$df[i,"value"]<40000) {
df_2010$df[i,"breaks"] <- "$30-$40K"
} else if (df_2010$df[i,"value"]>=40000) {
df_2010$df[i,"breaks"] <- "$40K+"
}
}
df_2010$df$value<-df_2010$df$breaks
county_choropleth(df_2010$df)
choro1$ggplot_scale = scale_fill_manual(name="Per Capita Income",values=col.pal, drop=FALSE)
choro1$render()
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(palette=3)
county_choropleth_acs(tableId="B19301") +
scale_fill_brewer(palette=2)
